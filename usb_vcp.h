/*
 * buffer.h
 *
 *  Created on: 13.02.2023
 *      Author: Hartmut KÃ¶hn
 *
 *        * @file           : usbd_cdc_if.c
  * @version        : NEFASTOR.COM Simple UART API implementation based on v2.0_Cube
  * @brief          : Usb device for Virtual Com Port.
  ******************************************************************************
  *
  * Author : Jean Roch / Nefastor.com
  *
  * This file is a MODIFIED file based on code generated by STM32CubeIDE.
  *
  * The STM32CubeIDE file on which this file is based came with NO license and is
  * therefore considered to be provided AS-IS. That code is copyright STMicroelectronics.
  *
  * The code added by Jean ROCH for the purpose of creating a practical UART API
  * is Copyright (c) 2022 Jean Roch.
  *
  * That code is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
  * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
  *
  * This VCP library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
  * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License along with this library.
  * If not, see <https://www.gnu.org/licenses/>.
  *
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
 */

#ifndef INC_USB_VCP_H_
#define INC_USB_VCP_H_

#include "stdint.h"

 typedef struct VCP_FIFO_TYPE
  {
    uint8_t* data;  // Will point to the Cube-generated Tx or Rx buffer
    int  write;    // Write index
    int  read;    // Read index
    int  lb;    // Additional index for write loop back or read lock
  } VCP_FIFO;




 extern VCP_FIFO usb_rx_fifo;
 extern VCP_FIFO usb_tx_fifo;



  void usb_pre_init(void);
  void usb_is_init(void);
  uint8_t* usb_update_rx(uint32_t *Len);
  void usb_vcp_init (uint8_t* UserTxBufferFS, uint8_t* UserRxBufferFS);
  int usb_vcp_send (uint8_t* buf, uint16_t len);
  int usb_vcp_recv (uint8_t* buf, uint16_t len);
  void usb_vcp_service ();


#endif /* INC_USB_VCP_H_ */
